name: release-asset
on:
  push:
    tags:
      - 'v*'

# see: https://markkarpov.com/post/github-actions-for-haskell-ci.html
# see: http://taylor.fausak.me/2016/05/09/add-files-to-github-releases/
# see: https://github.com/actions/upload-release-asset/issues/56

jobs:
  job1:
    name: Create one release for all OS outputs
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
    - name: Create the release
      if: ${{ success() }}
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.get-version.outputs.VERSION }}
        draft: true
        prerelease: false

  job2:
    name: Build and upload on ${{ matrix.os }}-ghc${{ matrix.ghc }}
    needs: job1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        ghc: ["8.10.4"]
        cabal: ["3.4.0.0"]

    steps:
    - uses: actions/checkout@v2
      name: Checkout repository

    - uses: haskell/actions/setup@v1
      id: setup-haskell
      name: Set up Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: cabal update
      run: |
        cabal update

    - name: cabal freeze
      run: |
        cabal freeze

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-

    - name: Build
      run: |
        cabal build all

    - name: Test
      run: |
        cabal test abbotsbury:test:tests

    - name: Get the version
      id: get-version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Install
      run: |
        mkdir bdist
        cabal install exe:abbot --install-method=copy --overwrite-policy=always --installdir=bdist
        cd bdist
        tar cf abbot-${{ steps.get-version.outputs.VERSION }}-${{ runner.os }}.tar.gz abbot

    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.job1.outputs.upload_url }}
        asset_path: ./bdist/abbot-${{ steps.get-version.outputs.VERSION }}-${{ runner.os }}.tar.gz
        asset_name: abbot-${{ steps.get-version.outputs.VERSION }}-${{ runner.os }}.tar.gz
        asset_content_type: application/octet-stream
